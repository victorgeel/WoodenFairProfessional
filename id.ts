import { TelegramClient, Api } from "npm:telegram";
import { StringSession } from "npm:telegram/sessions/index.js";
import { NewMessage, NewMessageEvent } from "npm:telegram/events/index.js";
import "jsr:@std/dotenv@0.225.4/load";

// --- Environment Variables ---
// .env ·Äñ·Ä≠·ÄØ·ÄÑ·Ä∫·Äë·Ä≤·Äô·Äæ·Ä¨ ·Ä°·Ä±·Ä¨·ÄÄ·Ä∫·Äï·Ä´·Äê·Ä≠·ÄØ·Ä∑·ÄÄ·Ä≠·ÄØ ·Äû·Ä±·ÄÅ·Äª·Ä¨·Äë·Ää·Ä∑·Ä∫·Äû·ÄΩ·ÄÑ·Ä∫·Ä∏·Äï·Ä±·Ä∏·Äï·Ä´:
// TELEGRAM_API_ID=·Äû·ÄÑ·Ä∫·ÅèAPI_ID
// TELEGRAM_API_HASH=·Äû·ÄÑ·Ä∫·ÅèAPI_HASH
// TELEGRAM_SESSION_STRING= (·Äï·Äë·Äô·Ä°·ÄÄ·Äº·Ä≠·Äô·Ä∫ run ·Äï·Äº·ÄÆ·Ä∏·Äô·Äæ·Äñ·Äº·Ää·Ä∑·Ä∫·Äõ·Äî·Ä∫ ·Äû·Ä≠·ÄØ·Ä∑·Äô·Äü·ÄØ·Äê·Ä∫ ·Äõ·Äæ·Ä≠·Äï·Äº·ÄÆ·Ä∏·Äû·Ä¨·Ä∏)
// TARGET_GROUP_ID= (Key ·Äê·ÄΩ·Ä±·Äï·Ä≠·ÄØ·Ä∑·Äõ·Äô·Ää·Ä∑·Ä∫ Group ID)
// SOURCE_CHAT_IDS= (Key ·Äê·ÄΩ·Ä±·Äõ·Äæ·Ä¨·Äõ·Äô·Ää·Ä∑·Ä∫ Chat ID ·Äô·Äª·Ä¨·Ä∏·Åä ·Äê·ÄÖ·Ä∫·ÄÅ·ÄØ·Äë·ÄÄ·Ä∫·Äï·Ä≠·ÄØ·Äú·Äª·Äæ·ÄÑ·Ä∫ comma ·ÄÅ‡∏±‡πà‡∏ô·Äï·Ä´)

const API_ID_STR = Deno.env.get("TELEGRAM_API_ID");
const API_HASH = Deno.env.get("TELEGRAM_API_HASH");
const SESSION_STRING = Deno.env.get("TELEGRAM_SESSION_STRING");
const TARGET_GROUP_ID_STR = Deno.env.get("TARGET_GROUP_ID");
const SOURCE_CHAT_IDS_STR = Deno.env.get("SOURCE_CHAT_IDS");

if (!API_ID_STR || !API_HASH) {
  console.error("‚ùå TELEGRAM_API_ID and TELEGRAM_API_HASH must be set in .env file.");
  Deno.exit(1);
}

const API_ID = parseInt(API_ID_STR);
const stringSession = new StringSession(SESSION_STRING || "");

const client = new TelegramClient(stringSession, API_ID, API_HASH, {
  connectionRetries: 5,
});

let TARGET_GROUP_ID: bigint | null = null;
let SOURCE_CHAT_IDS: bigint[] = [];

if (SESSION_STRING) {
  if (TARGET_GROUP_ID_STR) {
    try {
      TARGET_GROUP_ID = BigInt(TARGET_GROUP_ID_STR.trim());
    } catch (e: any) {
      console.error(`‚ùå Invalid TARGET_GROUP_ID format: ${TARGET_GROUP_ID_STR}. Error: ${e.message}`);
      // Allow to continue if only ID finder is needed, but warn
      console.warn("‚ö†Ô∏è Bot may not forward keys if TARGET_GROUP_ID is invalid.");
      TARGET_GROUP_ID = null; // Ensure it's null if parsing failed
    }
  } else {
    console.warn("‚ö†Ô∏è TARGET_GROUP_ID is not set in .env. Key forwarding will not work.");
  }

  if (SOURCE_CHAT_IDS_STR) {
    try {
      SOURCE_CHAT_IDS = SOURCE_CHAT_IDS_STR.split(",")
        .map(id => id.trim())
        .filter(id => id.length > 0)
        .map(id => BigInt(id));
      if (SOURCE_CHAT_IDS.length === 0 && SOURCE_CHAT_IDS_STR.trim() !== "") {
          console.warn("‚ö†Ô∏è SOURCE_CHAT_IDS string was provided but no valid IDs were parsed. Key extraction from specific chats will not work.");
      }
    } catch (e: any) {
      console.error(`‚ùå Invalid SOURCE_CHAT_IDS format: ${SOURCE_CHAT_IDS_STR}. Error: ${e.message}`);
      console.warn("‚ö†Ô∏è Key extraction from specific chats may not work.");
      SOURCE_CHAT_IDS = []; // Ensure it's an empty array if parsing failed
    }
  } else {
     console.warn("‚ö†Ô∏è SOURCE_CHAT_IDS is not set in .env. Key extraction from specific chats will not work unless using ID finder.");
  }
}

const V2RAY_REGEX = /(vless:\/\/[^\s`]+|trojan:\/\/[^\s`]+|ss:\/\/[^\s`]+|vmess:\/\/[^\s`]+)/g;

async function generateSession() {
  console.log("üîÑ Generating new Telegram session string...");
  try {
    // @ts-ignore
    await client.start({
      phoneNumber: async () => await prompt("üìû Enter your phone number (e.g., +959...):") || "",
      password: async () => await prompt("üîê Enter your 2FA password (if any, press Enter if none):") || "",
      phoneCode: async () => await prompt("üì® Enter the code you received from Telegram:") || "",
      onError: (err) => console.error("Login Error:", err.message),
    });
    const currentSession = client.session.save();
    console.log("\n‚úÖ New TELEGRAM_SESSION_STRING generated successfully!");
    console.log("Please copy the following string and paste it into your .env file under TELEGRAM_SESSION_STRING=");
    console.log("--------------------------------------------------");
    console.log(currentSession);
    console.log("--------------------------------------------------");
    console.log("IMPORTANT: After updating .env, please restart the script.");
  } catch (err: any) {
    console.error("‚ùå Failed to generate session string:", err.message);
  } finally {
    await client.disconnect();
    Deno.exit(0);
  }
}

// --- ID ·Äõ·Äæ·Ä¨·Äñ·ÄΩ·Ä±·Äõ·Äî·Ä∫ ·ÄÅ·Ä±·Äê·Äπ·Äê·Äë·Ää·Ä∑·Ä∫·Äû·ÄΩ·ÄÑ·Ä∫·Ä∏·Äë·Ä¨·Ä∏·Äû·Ä±·Ä¨ function (DEBUGGING ·Ä°·Äê·ÄΩ·ÄÄ·Ä∫) ---
async function tempChatIdFinder(event: NewMessageEvent) {
    const message = event.message;
    const senderChatId = message.chatId;
    let chatTitle = "Unknown Chat";
    try {
      const chat = await message.getChat();
      if (chat) {
        chatTitle = (chat as any).title || (chat as any).firstName || (chat as any).username || `ID Only: ${senderChatId}`;
      }
    } catch (e) {
      console.warn(`[ID FINDER] Could not get chat details for ID ${senderChatId}`);
    }
    console.log(`\n\n‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è [ID FINDER] Message received! ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è`);
    console.log(`Chat ID: ${senderChatId}`);
    console.log(`Chat Name/Title: ${chatTitle}`);
    console.log(`Message Text: "${message.text}"`);
    console.log(`From User ID: ${message.senderId}\n\n`);
  }
// --- ID ·Äõ·Äæ·Ä¨·Äñ·ÄΩ·Ä±·Äõ·Äî·Ä∫ function ·Ä°·ÄÜ·ÄØ·Ä∂·Ä∏ ---


async function extractKeys(event: NewMessageEvent) {
  const message = event.message;
  const senderChatId = message.chatId;

  console.log(`[DEBUG] New message received. Chat ID: ${senderChatId}, From User/Peer ID: ${message.senderId}, Text: "${message.text}"`);

  const configuredSourceChatIdsString = SOURCE_CHAT_IDS.map(id => id.toString()).join(", ");
  console.log(`[DEBUG] Configured SOURCE_CHAT_IDS (as BigInts): [${configuredSourceChatIdsString}]`);

  const isFromConfiguredSourceChat = SOURCE_CHAT_IDS.some(id => id === senderChatId);
  console.log(`[DEBUG] Is message from a configured source chat? ${isFromConfiguredSourceChat}`);

  if (!isFromConfiguredSourceChat) {
    return;
  }

  console.log(`[DEBUG] Message IS from a configured source chat (ID: ${senderChatId}). Processing for V2Ray keys...`);

  if (!message.text || message.text.trim() === "") {
    console.log(`[DEBUG] Message text is empty or whitespace only. No V2Ray keys to find.`);
    return;
  }

  const keys = message.text.match(V2RAY_REGEX);
  console.log(`[DEBUG] Regex match for V2Ray keys (result): ${JSON.stringify(keys)}`);

  if (keys && keys.length > 0) {
    console.log(`[DEBUG] Found ${keys.length} V2Ray key(s): "${keys.join("\", \"")}"`);
    const messageToSend = "```v2ray\n" + keys.join("\n") + "\n```";
    
    if (!TARGET_GROUP_ID) {
        console.error("‚ùå ERROR: TARGET_GROUP_ID is not set or invalid. Cannot forward keys.");
        return;
    }
    try {
      await client.sendMessage(TARGET_GROUP_ID, { message: messageToSend });
      console.log(`‚úÖ Successfully forwarded ${keys.length} key(s) from chat ${senderChatId} to target group ${TARGET_GROUP_ID}.`);
    } catch (error: any) {
      console.error(`‚ùå ERROR: Failed to send message to target group ${TARGET_GROUP_ID}. Error: ${error.message}`, error);
    }
  } else {
    console.log(`[DEBUG] No V2Ray keys found matching the regex in message from chat ${senderChatId}.`);
  }
}

async function runBot() {
  try {
    if (!SESSION_STRING) {
        console.error("‚ùå TELEGRAM_SESSION_STRING is not found in .env. Cannot start the bot.");
        console.log("‚ÑπÔ∏è Please run the script once to generate it, or add an existing one to your .env file.");
        await generateSession();
        return;
    }
    
    // TARGET_GROUP_ID and SOURCE_CHAT_IDS are parsed when SESSION_STRING exists.
    // Warnings for missing/invalid TARGET_GROUP_ID or SOURCE_CHAT_IDS are handled during parsing.

    console.log("‚ÑπÔ∏è Attempting to connect to Telegram...");
    await client.connect();
    const me = await client.getMe();
    console.log(`‚úÖ Logged in successfully as: ${me?.username || `ID: ${me?.id}`}`);

    // --- ID ·Äõ·Äæ·Ä¨·Äõ·Äî·Ä∫ handler ·ÄÄ·Ä≠·ÄØ ·Ä§·Äî·Ä±·Äõ·Ä¨·Äê·ÄΩ·ÄÑ·Ä∫ ·Ä°·Äô·Äº·Ä≤·Äê·Äô·Ä∫·Ä∏ (·ÄÅ·Ä±·Äê·Äπ·Äê debugging ·Ä°·Äê·ÄΩ·ÄÄ·Ä∫) ·Äë·Ää·Ä∑·Ä∫·Äë·Ä¨·Ä∏·Äô·Ää·Ä∫ ---
    // Chat ID ·Ä°·Äô·Äæ·Äî·Ä∫·ÄÄ·Ä≠·ÄØ ·Äû·Ä≠·Äõ·Äæ·Ä≠·Äï·Äº·ÄÆ·Ä∏ `.env` ·Äñ·Ä≠·ÄØ·ÄÑ·Ä∫·Äê·ÄΩ·ÄÑ·Ä∫ ·Äô·Äæ·Äî·Ä∫·ÄÄ·Äî·Ä∫·ÄÖ·ÄΩ·Ä¨ ·Äë·Ää·Ä∑·Ä∫·Äû·ÄΩ·ÄÑ·Ä∫·Ä∏·Äï·Äº·ÄÆ·Ä∏·Äï·Ä´·ÄÄ ·Ä§ handler ·ÄÄ·Ä≠·ÄØ comment ·Äï·Ä≠·Äê·Ä∫·Äï·Ä´ ·Äû·Ä≠·ÄØ·Ä∑·Äô·Äü·ÄØ·Äê·Ä∫ ·Äñ·Äö·Ä∫·Äõ·Äæ·Ä¨·Ä∏·Äï·Ä´·Åã
    console.log("üîî INFO: Temporary Chat ID Finder is ACTIVE. All messages seen by the bot will be logged with their Chat IDs.");
    client.addEventHandler(tempChatIdFinder, new NewMessage({})); // Message ·Ä°·Ä¨·Ä∏·Äú·ÄØ·Ä∂·Ä∏·ÄÄ·Ä≠·ÄØ ·Äî·Ä¨·Ä∏·Äë·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Ää·Ä∫
    // --- ------------------------------------------------------------------------------- ---

    if (SOURCE_CHAT_IDS && SOURCE_CHAT_IDS.length > 0) {
        client.addEventHandler(extractKeys, new NewMessage({ chats: SOURCE_CHAT_IDS as any[] }));
        console.log("ü§ñ Bot is now running and listening for new messages in specified source chats...");
        console.log(`üëÇ Listening on Chat IDs: [${SOURCE_CHAT_IDS.map(id => id.toString()).join(", ")}]`);
        if (TARGET_GROUP_ID) {
            console.log(`üéØ Forwarding to Target Group ID: ${TARGET_GROUP_ID}`);
        } else {
            console.warn("‚ö†Ô∏è WARNING: TARGET_GROUP_ID is not set. Keys will be extracted but not forwarded.");
        }
    } else {
        console.warn("‚ö†Ô∏è WARNING: SOURCE_CHAT_IDS is empty or not defined. V2Ray key extraction from specific chats is disabled.");
        console.log("ü§ñ Bot is running with the temporary ID finder. No specific chats are being monitored for V2Ray keys.");
    }

  } catch (err: any) {
    console.error("‚ùå Bot run failed:", err.message);
    if (err.message?.includes("AUTH_KEY_UNREGISTERED") || err.message?.includes("SESSION_REVOKED") || err.message?.includes("USER_DEACTIVATED")) {
      console.error("üîë Critical Error: The session string seems to be invalid, expired, or revoked.");
      console.error("üí° Hint: You might need to delete the TELEGRAM_SESSION_STRING from your .env file and run the script again to generate a new one.");
    }
  }
}

// --- Main Execution Logic ---
(async () => {
  if (!SESSION_STRING) {
    console.log("‚ÑπÔ∏è No TELEGRAM_SESSION_STRING found in .env. Starting session generation process...");
    await generateSession();
  } else {
    console.log("‚ÑπÔ∏è TELEGRAM_SESSION_STRING found. Attempting to start the bot...");
    if (!TARGET_GROUP_ID_STR && !SOURCE_CHAT_IDS_STR) {
        console.warn("‚ö†Ô∏è WARNING: Neither TARGET_GROUP_ID nor SOURCE_CHAT_IDS are set in the .env file.");
        console.warn("The bot will start with the ID finder, but key forwarding and extraction from specific chats will not work until these are configured.");
    } else if (!TARGET_GROUP_ID_STR) {
        console.warn("‚ö†Ô∏è WARNING: TARGET_GROUP_ID is not set in the .env file. Key forwarding will not work.");
    } else if (!SOURCE_CHAT_IDS_STR) {
        console.warn("‚ö†Ô∏è WARNING: SOURCE_CHAT_IDS is not set in the .env file. Key extraction from specific chats will not work.");
    }
    await runBot();
  }
})();

